<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YX.的博客</title>
  
  <subtitle>记录敲代码之旅</subtitle>
  <link href="https://creater66.github.io/atom.xml" rel="self"/>
  
  <link href="https://creater66.github.io/"/>
  <updated>2021-09-05T04:12:14.712Z</updated>
  <id>https://creater66.github.io/</id>
  
  <author>
    <name>YX.</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UseDatabase</title>
    <link href="https://creater66.github.io/2021/09/01/UseDatabase/"/>
    <id>https://creater66.github.io/2021/09/01/UseDatabase/</id>
    <published>2021-09-01T10:17:42.000Z</published>
    <updated>2021-09-05T04:12:14.712Z</updated>
    
    <content type="html"><![CDATA[<p>持久化储存数据的方法有三种，分别是：文件存储、SharedPreference以及数据库存储。</p><h2 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h2><h3 id="向文件中写入数据"><a href="#向文件中写入数据" class="headerlink" title="向文件中写入数据"></a>向文件中写入数据</h3><p>文件存储不对存储的内容进行任何的格式化处理，所有的数据都是原封不动地保存到文件中，因而它比较适合用于存储一些简单的文本数据或二进制数据，具体操作如下。</p><p>Context类中提供了一个openFileOutput()方法，可以用于将数据存储到指定的文件中。这个方法接收两个参数，第一个参数是文件名，这个文件不能包含路径，因为所有的文件都是默认存储到/data/data/<package name>/files/目录下。第二个参数是文件的操作模式，主要有两种模式可选，MODE_PRIVATE和MODE_APPEND。其中MODE_PRIVATE是默认的操作模式，表示当指定同样文件名的时候，所写入的内容将会覆盖原文件中的内容，而MODE_APPEND则表示如果该文件已存在，就往文件里追加内容，不存在就创建文件。示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EditText edit;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        edit = (EditText) findViewById(R.id.edit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String inputText)</span> </span>&#123;</span><br><span class="line">        FileOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter writer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = openFileOutput(<span class="string">&quot;data&quot;</span>, Context.MODE_PRIVATE);</span><br><span class="line">            writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(out));</span><br><span class="line">            writer.write(inputText);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先使用<code>openFileOutput</code>方法获得一个FlieOutputStream(字节输出流)对象，接着new一个BufferedWriter(缓冲流)，传入的参数是一个OutputStreamWriter(转换流)对象，接着使用Buffere-dWriter对象下的write方法把想写的内容写入文件。</p><h3 id="从文件中读取数据"><a href="#从文件中读取数据" class="headerlink" title="从文件中读取数据"></a>从文件中读取数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">String inputText = load(); </span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(inputText)) &#123;</span><br><span class="line">            edit.setText(inputText);</span><br><span class="line">            edit.setSelection(inputText.length());</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;Restoring succeeded&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">load</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileInputStream in = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">        StringBuilder content = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = openFileInput(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">            String line = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                content.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> content.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先通过openFileInput()方法获取到了一个FileInputStream对象，然后new了一个BufferdRe-ader对象，然后使用BufferdReader对象下的readLine()方法一行一行地读取数据。</p><h2 id="SharedPreferences存储"><a href="#SharedPreferences存储" class="headerlink" title="SharedPreferences存储"></a>SharedPreferences存储</h2><p>SharedPreferences是使用键值对的方式来存储数据的。当保存一条数据的时候，需要给这条数据提供一个对应的键，这样在读取数据的时候可以通过这个键值把相应的值选出来。而且Shared-Preferences还支持多种不同的数据类型存储，如果存储的数据类型是整型，那么读取出来的数据也是整型，其他数据类型也一样。</p><h3 id="将数据存储到SharedPreferences中"><a href="#将数据存储到SharedPreferences中" class="headerlink" title="将数据存储到SharedPreferences中"></a>将数据存储到SharedPreferences中</h3><p>要想使用SharedPreferences来存储数据，首先需要获取到SharedPreferences对象。Android中主要提供了3中方法用于得到SharedPreferences对象。</p><p>1.Context类中的getSharedPreferences()方法</p><p>此方法接收两个参数，第一个参数用于指定SharedPreferences文件的名称，如果指定的文件不存在则会创建一个，SharedPreferences文件都是存放在/data/data/<package name>/shared-_prefs/目录下。第二个参数用于指定操作模式，目前只有MODE_PRIVATE这一种模式可选，它是默认的操作模式，和直接传入0效果是相同的，表示只有当前应用程序才可以对这个SharedPreferen-ce文件进行读写。</p><p>2.Activity类中的SharedPreferences()方法</p><p>这个方法接收操作模式一个参数，因为使用这个方法时会自动将当前活动的类名作为SharedPr-eferences的文件名。</p><p>3.PreferenceManager类中的getDefaultSharedPreferences()方法</p><p>这是一个静态方法，它接受一个Context参数，并且自动使用当前应用程序的包名作为前缀来命名SharedPreferences文件。然后向SharedPreferences文件中存储数据了，主要可以分为3部实现。</p><p>（1）调用SharedPreferences对象的edit()方法来获取一个SharedPreferences.Editor对象。</p><p>（2）向SharedPreferences.Editor对象中添加数据。</p><p>（3）调用apply()方法将添加的数据提交，从而完成数据存储。</p><p>代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button saveData = (Button) findViewById(R.id.save_data);</span><br><span class="line">        saveData.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                SharedPreferences.Editor editor = getSharedPreferences(<span class="string">&quot;data&quot;</span>, MODE_PRIVATE).edit();</span><br><span class="line">                editor.putString(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">                editor.putInt(<span class="string">&quot;age&quot;</span>, <span class="number">28</span>);</span><br><span class="line">                editor.putBoolean(<span class="string">&quot;married&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">                editor.apply();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="从SharedPreferences中读取数据"><a href="#从SharedPreferences中读取数据" class="headerlink" title="从SharedPreferences中读取数据"></a>从SharedPreferences中读取数据</h3><p>首先使用getSharedPreferences方法获取到一个SharedPreherences对象，然后根据不同的数据类型，使用SharedPreferences对象下不同的&lt;数据类型&gt;get方法，这些方法接收两个参数，第一个是键，第二个是默认值，即表示当传入的键找不到对应的值时会以什么样的默认值进行返回。代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Button restoreData = (Button) findViewById(R.id.restore_data);</span><br><span class="line">        restoreData.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                SharedPreferences pref = getSharedPreferences(<span class="string">&quot;data&quot;</span>, MODE_PRIVATE);</span><br><span class="line">                String name = pref.getString(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> age = pref.getInt(<span class="string">&quot;age&quot;</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">boolean</span> married = pref.getBoolean(<span class="string">&quot;married&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">                Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;name is &quot;</span> + name);</span><br><span class="line">                Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;age is &quot;</span> + age);</span><br><span class="line">                Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;married is &quot;</span> + married);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="SOLite数据库存储"><a href="#SOLite数据库存储" class="headerlink" title="SOLite数据库存储"></a>SOLite数据库存储</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>两个重要的实例方法：<code>getReadableDatabase()</code>和<code>getWritableDatabase()</code>。这两个方法都可以创建或打开一个现有的数据库（如果数据库已存在则直接打开，否则创建一个新的数据库），并返回一个可对数据库进行读写操作的对象。不同的是，当数据库不可以写入的时候（如磁盘空间已满），<code>getReadableDatabase()</code>方法返回的对象将以只读的方式去打开数据库，而<code>getWritable-Database()</code>方法则将会出现异常。</p><p>SOLiteOpenHelper中有两个构造方法可供重写，参数少一点的那个构造方法接收4个参数，第一个参数是Context，第二个参数是数据库名，第三个参数允许我们在查询数据的时候返回一个自定义的Cursor，一般都是传入null，第四个参数表示当前数据库的版本号，可用于对数据库进行升级操作。</p><p>构造完SOLiteOpenHelper对象后，再调用它的<code>getReadableDatabase()</code>或<code>getWritableDatabase()</code>方法就能够创建数据库了，数据库文件会放在/data/data/<package name>/databases/目录下。</p><p>建表语句示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDatabaseHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CREATE_BOOK = <span class="string">&quot;create table Book (&quot;</span></span><br><span class="line">            + <span class="string">&quot;id integer primary key autoincrement, &quot;</span></span><br><span class="line">            + <span class="string">&quot;author text, &quot;</span></span><br><span class="line">            + <span class="string">&quot;price real, &quot;</span></span><br><span class="line">            + <span class="string">&quot;pages integer, &quot;</span></span><br><span class="line">            + <span class="string">&quot;name text)&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDatabaseHelper</span><span class="params">(Context context, String name,</span></span></span><br><span class="line"><span class="params"><span class="function">                            SQLiteDatabase.CursorFactory factory, <span class="keyword">int</span> version)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, name, factory, version);</span><br><span class="line">        mContext = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</span><br><span class="line">        db.execSQL(CREATE_BOOK);</span><br><span class="line">        Toast.makeText(mContext, <span class="string">&quot;Create succeeded&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</span><br><span class="line">        db.execSQL(<span class="string">&quot;drop table if exists Book&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们把建表语句定义成了一个字符串常量，然后在onCreate()方法中又调用了SOLiteDatabase的execSQL()方法去执行这条建表语句。</p><p>MainActivity中的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MyDatabaseHelper dbHelper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        dbHelper = <span class="keyword">new</span> MyDatabaseHelper(<span class="keyword">this</span>, <span class="string">&quot;BookStore.db&quot;</span>, <span class="keyword">null</span>, <span class="number">1</span>);</span><br><span class="line">        Button createDatabase = (Button) findViewById(R.id.create_database);</span><br><span class="line">        createDatabase.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                dbHelper.getWritableDatabase();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当点击按钮时，就会检测到当前程序中并没有BookStore.db这个数据库，于是会创建数据库并调用MyDatabaseHelper中的onCreate()方法，这样就成功创建了Book表。当再次点击时，会发现此时已经存在BookStore.db数据库了，因此不会再创建一次。</p><h3 id="升级数据库"><a href="#升级数据库" class="headerlink" title="升级数据库"></a>升级数据库</h3><p>在MyDatabaseHelper中加入建表语句，然后在onUpgrade方法中写入以下语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.execSQL(<span class="string">&quot;drop table if exists Book&quot;</span>);</span><br><span class="line">db.execSQL(<span class="string">&quot;drop table if exists Category&quot;</span>);</span><br><span class="line">onCreate(db);</span><br></pre></td></tr></table></figure><p>这里执行了两条DROP语句，表示如果数据库中已经存在Book表或者Category表了，就将这两张表删掉，然后再调用onCreate()方法重新创建。这里先将已经存在的表删除掉，因为如果在创建表时发现这张表已经存在了，就会直接报错。然后在MyDattabaseHelper的构造语句中将版本编号设置为一个更大的数字。</p><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p>首先使用MyDatabaseHelper下的getWritableDatabase()方法获取到一个SQLiteDatabase对象，然后再new一个ContentValues对象，再使用ContentValues对象下的put方法把数据存入，put方法接收两个参数，第一个参数是键值，第二个参数是数据，然后再调用SQLiteDatabase下的insert()方法将数据加入数据库，insert()方法接收三个参数，第一个是表名，第二个可以写null，第三个是一个ContentValues对象。具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="line">                ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">                <span class="comment">// 开始组装第一条数据</span></span><br><span class="line">                values.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;The Da Vinci Code&quot;</span>);</span><br><span class="line">                values.put(<span class="string">&quot;author&quot;</span>, <span class="string">&quot;Dan Brown&quot;</span>);</span><br><span class="line">                values.put(<span class="string">&quot;pages&quot;</span>, <span class="number">454</span>);</span><br><span class="line">                values.put(<span class="string">&quot;price&quot;</span>, <span class="number">16.96</span>);</span><br><span class="line">                db.insert(<span class="string">&quot;Book&quot;</span>, <span class="keyword">null</span>, values); <span class="comment">// 插入第一条数据</span></span><br><span class="line">                values.clear();</span><br><span class="line">                <span class="comment">// 开始组装第二条数据</span></span><br><span class="line">                values.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;The Lost Symbol&quot;</span>);</span><br><span class="line">                values.put(<span class="string">&quot;author&quot;</span>, <span class="string">&quot;Dan Brown&quot;</span>);</span><br><span class="line">                values.put(<span class="string">&quot;pages&quot;</span>, <span class="number">510</span>);</span><br><span class="line">                values.put(<span class="string">&quot;price&quot;</span>, <span class="number">19.95</span>);</span><br><span class="line">                db.insert(<span class="string">&quot;Book&quot;</span>, <span class="keyword">null</span>, values); <span class="comment">// 插入第二条数据</span></span><br></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>更新数据用SQLiteDatabase中的updata()方法，这个方法接收4个参数，第一个参数是表名，第二个参数是ContentValues对象，要把更新数据在这里组装进去。第三、第四个参数用于约束更新某一行或某几行中的数据，不指定的话默认就是更新所有行。具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="line">                ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">                values.put(<span class="string">&quot;price&quot;</span>, <span class="number">10.99</span>);</span><br><span class="line">                db.update(<span class="string">&quot;Book&quot;</span>, values, <span class="string">&quot;name = ?&quot;</span>, <span class="keyword">new</span> String[] &#123; <span class="string">&quot;The Da Vinci Code&quot;</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p> 首先new一个SQLiteDatabase对象，然后使用SQLiteDatabase对象下的delete方法，这个方法接收三个参数，第一个参数是表名，第二个参数是限制条件，第三个参数对第二个限制条件进行详细描述。具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="line">                db.delete(<span class="string">&quot;Book&quot;</span>, <span class="string">&quot;pages &gt; ?&quot;</span>, <span class="keyword">new</span> String[] &#123; <span class="string">&quot;500&quot;</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p>首先new一个SQLiteDatabase对象，然后使用SQLiteDatabase对象下的query()方法得到一个Cusor对象，然后使用Cusor对象下的get&lt;数据类型&gt;方法查询数据，方法query()接收7个参数，通常第一个参数写入表名，其他参数写入null，这样表示查询全部数据。使用完方法get&lt;数据类型&gt;后，需要使用Cusor对象下的close()方法关闭数据库。具体代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="line">                <span class="comment">// 查询Book表中所有的数据</span></span><br><span class="line">                Cursor cursor = db.query(<span class="string">&quot;Book&quot;</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">if</span> (cursor.moveToFirst()) &#123;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        <span class="comment">// 遍历Cursor对象，取出数据并打印</span></span><br><span class="line">                        String name = cursor.getString(cursor.getColumnIndex(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                        String author = cursor.getString(cursor.getColumnIndex(<span class="string">&quot;author&quot;</span>));</span><br><span class="line">                        <span class="keyword">int</span> pages = cursor.getInt(cursor.getColumnIndex(<span class="string">&quot;pages&quot;</span>));</span><br><span class="line">                        <span class="keyword">double</span> price = cursor.getDouble(cursor.getColumnIndex(<span class="string">&quot;price&quot;</span>));</span><br><span class="line">                        &#125; <span class="keyword">while</span> (cursor.moveToNext());</span><br><span class="line">                &#125;</span><br><span class="line">                cursor.close();</span><br></pre></td></tr></table></figure><h2 id="使用LitePal操作数据库"><a href="#使用LitePal操作数据库" class="headerlink" title="使用LitePal操作数据库"></a>使用LitePal操作数据库</h2><h3 id="配置LitePal"><a href="#配置LitePal" class="headerlink" title="配置LitePal"></a>配置LitePal</h3><p>首先在<code>app/build.gradle</code>文件下的dependencies闭包中添加如下内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">&#x27;org.litepal.android:core:1.3.2&#x27;</span></span><br></pre></td></tr></table></figure><p>然后在app/src/main目录下创建一个assets目录，在assets目录下再新建一个litepal.xml文件，在litepal.xml文件下写入如下内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;litepal&gt;</span><br><span class="line">    &lt;dbname value=<span class="string">&quot;BookStore&quot;</span>&gt;&lt;/dbname&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;version value=<span class="string">&quot;1&quot;</span>&gt;&lt;/version&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;list&gt;</span><br><span class="line">    &lt;/list&gt;</span><br><span class="line">&lt;/litepal&gt;</span><br></pre></td></tr></table></figure><p>其中，<dbname>标签用于指定数据库名，<version>标签用于指定数据库版本号，<list>标签用于指定所有的映射模型。</p><p>最后还需要再配置一下LitePalApplication，修改AndroidManifest.xml中的代码，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;application</span><br><span class="line">    android:name=<span class="string">&quot;org.litepal.LitePalApplication&quot;</span></span><br><span class="line">    ...</span><br><span class="line">&lt;/application&gt;</span><br></pre></td></tr></table></figure><h3 id="创建和升级数据库"><a href="#创建和升级数据库" class="headerlink" title="创建和升级数据库"></a>创建和升级数据库</h3><p>Litepal采取的是对象关系映射（ORM）的模式，那么什么是对象关系映射呢？简单点说，我们使用的编程语言是面向对象语言，而使用的数据库则是关系型数据库，那么将面向对象的语言和面向关系的数据库之间建立一种映射关系，这就是对象关系映射了。</p><p>首先定义一个Book类，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">extends</span> <span class="title">DataSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pages;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String press;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPages</span><span class="params">(<span class="keyword">int</span> pages)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pages = pages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> press;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPress</span><span class="params">(String press)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.press = press;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将Book类添加到映射模型列表中，修改litepal.xml中的代码，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;litepal&gt;</span><br><span class="line"></span><br><span class="line">&lt;dbname value=<span class="string">&quot;BookStore&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;version value=<span class="string">&quot;2&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;list&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapping <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.example.litepaltest.Book&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapping <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.example.litepaltest.Category&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/list&gt;</span><br><span class="line"></span><br><span class="line">&lt;/litepal&gt;</span><br></pre></td></tr></table></figure><p>这里使用<mapping>标签来声明我们要配置的映射模型类，注意一定要使用完整的类名。不管有多少模型类需要映射，都使用同样的方式配置在<list>标签下即可。</p><p>然后修改MainActivity中的代码，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button createDatabase = (Button) findViewById(R.id.create_database);</span><br><span class="line">        createDatabase.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Connector.getDatabase();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Button addData = (Button) findViewById(R.id.add_data);</span><br><span class="line">        addData.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Book book = <span class="keyword">new</span> Book();</span><br><span class="line">                book.setName(<span class="string">&quot;The Da Vinci Code&quot;</span>);</span><br><span class="line">                book.setAuthor(<span class="string">&quot;Dan Brown&quot;</span>);</span><br><span class="line">                book.setPages(<span class="number">454</span>);</span><br><span class="line">                book.setPrice(<span class="number">16.96</span>);</span><br><span class="line">                book.setPress(<span class="string">&quot;Unknow&quot;</span>);</span><br><span class="line">                book.save();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Button updateData = (Button) findViewById(R.id.update_data);</span><br><span class="line">        updateData.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Book book = <span class="keyword">new</span> Book();</span><br><span class="line">                book.setPrice(<span class="number">14.95</span>);</span><br><span class="line">                book.setPress(<span class="string">&quot;Anchor&quot;</span>);</span><br><span class="line">                book.updateAll(<span class="string">&quot;name = ? and author = ?&quot;</span>, <span class="string">&quot;The Lost Symbol&quot;</span>, <span class="string">&quot;Dan Brown&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Button deleteButton = (Button) findViewById(R.id.delete_data);</span><br><span class="line">        deleteButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                DataSupport.deleteAll(Book.class, <span class="string">&quot;price &lt; ?&quot;</span>, <span class="string">&quot;15&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Button queryButton = (Button) findViewById(R.id.query_data);</span><br><span class="line">        queryButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                List&lt;Book&gt; books = DataSupport.findAll(Book.class);</span><br><span class="line">                <span class="keyword">for</span> (Book book: books) &#123;</span><br><span class="line">                    Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book name is &quot;</span> + book.getName());</span><br><span class="line">                    Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book author is &quot;</span> + book.getAuthor());</span><br><span class="line">                    Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book pages is &quot;</span> + book.getPages());</span><br><span class="line">                    Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book price is &quot;</span> + book.getPrice());</span><br><span class="line">                    Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book press is &quot;</span> + book.getPress());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，调用Connector.getDatabase()方法就是一次最简单的数据库操作，只要点击一下按钮，数据库就会自动创建完成了。</p><p>升级数据库时，只需要改你想改的任何内容，然后将版本号加1就行了。</p><p>比如我们想要向Book表中添加一个press(出版社)列，直接修改Book类中的代码，添加一个press字段即可，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> String press;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> press;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPress</span><span class="params">(String press)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.press = press;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与此同时，我们还想再添加一张Category表，那么只需要新建一个Category类就可以了，然后在里面加入自己想加入的数据类型，再把这个新的模型类添加到映射模型列表中，改完了所有我们想改的东西，只需要记得将版本号加1就行了。</p><h3 id="使用Litepal添加数据"><a href="#使用Litepal添加数据" class="headerlink" title="使用Litepal添加数据"></a>使用Litepal添加数据</h3><p>添加数据只需要新建一个Book类，然后写入数据，最后使用Book类下的save()方法即可。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Book book = <span class="keyword">new</span> Book();</span><br><span class="line">                book.setName(<span class="string">&quot;The Da Vinci Code&quot;</span>);</span><br><span class="line">                book.setAuthor(<span class="string">&quot;Dan Brown&quot;</span>);</span><br><span class="line">                book.setPages(<span class="number">454</span>);</span><br><span class="line">                book.setPrice(<span class="number">16.96</span>);</span><br><span class="line">                book.setPress(<span class="string">&quot;Unknow&quot;</span>);</span><br><span class="line">                book.save();</span><br></pre></td></tr></table></figure><h3 id="使用LitePal更新数据"><a href="#使用LitePal更新数据" class="headerlink" title="使用LitePal更新数据"></a>使用LitePal更新数据</h3><p>更新数据同样先新创建一个Book类，然后把想要更新的数据写进去，然后再使用Book类下的updata()方法进行更新，updata()方法第一个参数是约束条件，后面的参数是对约束条件的具体描述，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Book book = <span class="keyword">new</span> Book();</span><br><span class="line">                book.setPrice(<span class="number">14.95</span>);</span><br><span class="line">                book.setPress(<span class="string">&quot;Anchor&quot;</span>);</span><br><span class="line">                book.updateAll(<span class="string">&quot;name = ? and author = ?&quot;</span>, <span class="string">&quot;The Lost Symbol&quot;</span>, <span class="string">&quot;Dan Brown&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="使用LitePal删除数据"><a href="#使用LitePal删除数据" class="headerlink" title="使用LitePal删除数据"></a>使用LitePal删除数据</h3><p>使用LitePal删除数据的方式主要有两种，第一种是直接调用已存储对象的delete()方法就可以了。第二种是使用DataSupport下的deleteAll()方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataSupport.deleteAll(Book.class, <span class="string">&quot;price &lt; ?&quot;</span>, <span class="string">&quot;15&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="使用LitePal查询数据"><a href="#使用LitePal查询数据" class="headerlink" title="使用LitePal查询数据"></a>使用LitePal查询数据</h3><p>查询数据先使用DataSupport下的findAll()方法获取到一个List，findAll()方法的参数是表名+.class查询到到数据就都存储到List中了，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Book&gt; books = DataSupport.findAll(Book.class);</span><br><span class="line">                <span class="keyword">for</span> (Book book: books) &#123;</span><br><span class="line">                    Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book name is &quot;</span> + book.getName());</span><br><span class="line">                    Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book author is &quot;</span> + book.getAuthor());</span><br><span class="line">                    Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book pages is &quot;</span> + book.getPages());</span><br><span class="line">                    Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book price is &quot;</span> + book.getPrice());</span><br><span class="line">                    Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book press is &quot;</span> + book.getPress());</span><br></pre></td></tr></table></figure><p>除了findA11(方法之外, LitePal 还提供了很多其他非常有用的查询 API 。比如我们想要查 Book 表中的第一条数据就可以这样写:<br> Book firstBook = DataSupport . findFirst ( Book . class );<br>查询 Book 表中的最后一条数据就可以这样写:<br> Book lastBook = DataSupport . findLast ( Book . class );<br>我们还可以通过连缀查询来定制更多的查询功能。<br>口 select ()方法用于指定查询哪几列的数据,对应了 sOL 当中的 select 关键字。比如只查 name 和 author 这两列的数据,就可以这样写:<br> List &lt; Book &gt; books = DataSupport . select (“ name ＂,” author “). find ( Book . class );<br>口 where ()方法用于指定查询的约束条件,对应了 SOL 当中的 where 关键字。比如只查页数大于400的数据,就可以这样写:<br> List &lt; Book &gt; books = DataSupport . where (＂ pages &gt;?”,＂400”). find ( Book . class );<br>口 order ()方法用于指定结果的排序方式,对应了 SOL 当中的 order by 关键字。比如将查询结果按照书价从高到低排序,就可以这样写:<br> List &lt; Book &gt; books = DataSupport . order (＂ price desc “). find ( Book . class );<br>其中 desc 表示降序排列, asc 或者不写表示升序排列。<br>口 limit ()方法用于指定查询结果的数量,比如只查表中的前3条数据,就可以这样写:<br> List &lt; Book &gt; books = DataSupport . limit (3). find ( Book . class );<br>口 offset ()方法用于指定查询结果的偏移量,比如查询表中的第2条、第3条、第4条数据,就可以这样写:<br> List &lt; Book &gt; books = DataSupport . limit (3). offset (1). find ( Book . class );</p><p>由于 limit (3)查询到的是前3条数据,这里我们再加上 offset (1)进行一个位置的偏移,就能实现查询第2条、第3条、第4条数据的功能了。 limit ()和 offset ()方法共同对应了 SQL 当中的 limit 关键字。<br>当然,你还可以对这5个方法进行任意的连缀组合,来完成一个比较复杂的查询操作: List &lt; Book &gt; books = DataSupport . select (“ name ＂,＂ author ＂,“ pages ＂)<br>         .where (“ pages &gt;?＂,＂400＂).order (“ pages “). limit (10) offset (10). find ( Book . class );<br>这段代码就表示,查询 Book 表中第11~20条满足页数大于400这个条件的 name 、 author 和 pages 这3列数据,并将查询结果按照页数升序排列。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;持久化储存数据的方法有三种，分别是：文件存储、SharedPreference以及数据库存储。&lt;/p&gt;
&lt;h2 id=&quot;文件存储&quot;&gt;&lt;a href=&quot;#文件存储&quot; class=&quot;headerlink&quot; title=&quot;文件存储&quot;&gt;&lt;/a&gt;文件存储&lt;/h2&gt;&lt;h3 id=&quot;向文</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>UesGit</title>
    <link href="https://creater66.github.io/2021/08/22/UerGit/"/>
    <id>https://creater66.github.io/2021/08/22/UerGit/</id>
    <published>2021-08-22T08:28:26.000Z</published>
    <updated>2021-08-28T09:24:09.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建代码仓库"><a href="#创建代码仓库" class="headerlink" title="创建代码仓库"></a>创建代码仓库</h2><p>第一次使用Git创建仓库时，需要先配置一下身份，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>配置完成后，可以用同样的命令来查看是否配置成功，只需要将最后的名字和邮箱地址去掉即可。</p><p>在项目的目录下打开Git，输入命令：<code>git init</code>,这样就完成了创建代码仓库，创建完成后可以通过<code>ls -al</code>命令来查看一下，如果想要删除本地仓库，只需要删除这个文件夹就行了。</p><h2 id="提交本地代码"><a href="#提交本地代码" class="headerlink" title="提交本地代码"></a>提交本地代码</h2><p>首先使用add命令把想要提交的代码添加进来，然后用commit命令执行提交操作。常见的命令及作用：</p><p><code>git add 文件名</code>.                                    添加单个文件</p><p><code>git add 目录名</code>.                                    添加一个目录下的所有文件</p><p><code>git add .</code>.                                            添加所有的文件</p><p><code>git commit -m &quot;描述信息&quot;</code>.                提交添加的文件                    </p><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>忽略文件是名为.gitignore的文件，在..gitignore文件中每一行指定的文件就不会加入到版本控制当中。</p><h2 id="与修改内容有关的一些命令及作用"><a href="#与修改内容有关的一些命令及作用" class="headerlink" title="与修改内容有关的一些命令及作用"></a>与修改内容有关的一些命令及作用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status查看文件修改情况</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff查看文件的更改内容</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff 文件路径  查看一个文件的更改内容</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 文件路径  撤销对一个文件的修改（注意：只能撤销未提交的文件的修改）</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD 文件路径      取消文件的添加</span><br><span class="line">（对于已提交的文件，可以先用此命令取消添加，然后再用`git checkout`撤销修改）</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log 查看所有历史提交信息</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log 一记录的id -<span class="number">1</span>    只查看一条记录</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log 一记录的id -<span class="number">1</span> -p  查看一条提交记录具体修改了什么内容</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^ 返回上一个版本</span><br><span class="line">HEAD表示当前版本，HEAD^表示上一个版本，HEAD^^表示上上个版本，HEAD~“数字”表示往上“数字个版本”</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 记录的id    表示到达指定的版本</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog  显示每一次命令</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=online   显示每次提交记录的id</span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> 文件名 查看文件内容</span><br></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD <span class="comment">-- 文件名 查看工作区和版本库里面最新版本的区别</span></span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rm</span>  文件名 在文件管理器里把文件删除</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> rm  文件名 在版本库里把文件删除</span><br></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ls</span>查看文件夹里有哪些文件</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span>  文件名  进入一个文件夹</span><br></pre></td></tr></table></figure><p>更多命令及其用法可参考<a href="https://liaoxuefeng.gitee.io/resource.liaoxuefeng.com/git/git-cheat-sheet.pdf">更多命令及其作用</a>。</p><p><code>git checkout -- 文件名</code>是用版本库里的版本代替工作区的版本，无论工作区是删除还是修改，都可以“一键还原”。（注意：从来没有被添加到版本库就被删除的文件，是无法恢复的）</p><p>Git跟踪并管理的是修改，而不是文件。比如，我们现在文件里加入一行文字，然后用指令<code>git add 文件名</code>把修改提交的暂存区，然后再再文件中加入一行文字，这时使用指令<code>git commit -m &quot;标注&quot;</code> 进行提交，然后再使用指令<code>git status</code>查看状态，发现显示第二次的修改没有提交。这是因为Git跟踪并管理的是修改，而不是文件，第一次修改后，修改被提交到了暂存区，因而第一次修改可以提交，而第二次的修改没有提交到暂存区，所以没有提交到版本库。</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><p>首先在Github上创建一个仓库(repository)，然后在本地的仓库下运行命令：<code> git remote add origin git@github.com:Github账户名/learngit.git</code>，这里的origin是远程库的名字，这是Git的默认叫法，也可以改成别的。</p><h3 id="把本地库的内容推送到远程库上"><a href="#把本地库的内容推送到远程库上" class="headerlink" title="把本地库的内容推送到远程库上"></a>把本地库的内容推送到远程库上</h3><p>使用命令<code>git push -u origin master</code>，这里是把当前分支master推送到远程。由于远程库是空的，我们第一次推送master分支时，加上了<code>-u</code>参数，Git不但会把本地的master分支内容推送到远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。从现在起，只要本地作了提交，就可以通过命令<code>git push origin master</code>把本地master分支的最新修改推送至Github。</p><h2 id="删除远程库"><a href="#删除远程库" class="headerlink" title="删除远程库"></a>删除远程库</h2><p>删除前可以用命令<code>git remote -v</code>查看远程库信息，然后用命令<code>git remote rm origin</code>删除远程库，此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库并没有任何改动。要真正删除远程库，需要登录到Github，在后台页面找到删除按钮再删除。</p><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p><p>现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;创建代码仓库&quot;&gt;&lt;a href=&quot;#创建代码仓库&quot; class=&quot;headerlink&quot; title=&quot;创建代码仓库&quot;&gt;&lt;/a&gt;创建代码仓库&lt;/h2&gt;&lt;p&gt;第一次使用Git创建仓库时，需要先配置一下身份，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Use Broadcast</title>
    <link href="https://creater66.github.io/2021/08/20/UseBroadcast/"/>
    <id>https://creater66.github.io/2021/08/20/UseBroadcast/</id>
    <published>2021-08-20T10:17:42.000Z</published>
    <updated>2021-08-21T09:54:31.763Z</updated>
    
    <content type="html"><![CDATA[<p>本篇博客讲一讲Android Studio中广播的使用。</p><p>什么是广播呢？我们上高中时，每个教室里都会装有一个喇叭，这些喇叭都是接入到学校的广播室的，一旦有什么重要的通知，就会播放一条广播来告知全校的师生。类似的工作机制其实在计算机领域也有很广泛的应用，在一个IP网络范围中，最大的IP地址是被保留作为广播来使用的。比如某个网络的IP范围是192.168.0.255。广播数据包会被发送到同一网络上的所有端口，这样在该网络中的每台主机都将会收到这条广播。为了便于进行系统级别的消息通知，Android也引入了一套类似的广播消息机制。</p><h2 id="广播的类型："><a href="#广播的类型：" class="headerlink" title="广播的类型："></a>广播的类型：</h2><p>广播主要可以分为两种类型：标准广播和有序广播。</p><p><strong>标准广播</strong>（Normal broadcasts）：广播发出后，所有的接收器同时接收到这条广播消息。优点在于这类广播效率高，缺点是无法被截断。</p><p><strong>有序广播</strong>（Ordered broadcasts）：广播发出后，同一时刻只有一个广播接收器能够收到这条广播消息，当这个广播接收器中的逻辑执行完毕后，广播才会继续传递。也就是说，这类广播的广播接收器是有先后顺序的，优先级高的广播接收器就优先收到这条广播消息，并且前面的广播接收器可以截断正在传递的广播，这样后面的广播接收器就无法收到广播消息了。</p><h2 id="接收系统广播"><a href="#接收系统广播" class="headerlink" title="接收系统广播"></a>接收系统广播</h2><p>  广播接收器需要对自己感兴趣的广播进行注册，这样当广播发出后，这个接收器就可以接收到相应的广播。注册广播的方式有两种，<strong>动态注册和静态注册</strong>，前者是在代码中注册，后者是在AndroidManifest.xml中注册。</p><p><strong>创建一个广播接收器：</strong></p><p>新建一个类，让它继承自BroadcastReceive，然后重写onReceive方法。创建广播接收器是需要用到以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> IntentFilter intentFilter;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> NetworkChangeReceiver networkChangeReceiver;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">       setContentView(R.layout.activity_main);</span><br><span class="line">       intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">       intentFilter.addAction(<span class="string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span>);</span><br><span class="line">       networkChangeReceiver = <span class="keyword">new</span> NetworkChangeReceiver();</span><br><span class="line">       registerReceiver(networkChangeReceiver, intentFilter);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onDestroy();</span><br><span class="line">       unregisterReceiver(networkChangeReceiver);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">NetworkChangeReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">           <span class="comment">//加入逻辑</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>NetworkChangeReceive是一个内部类，用来作为广播接收器，在onCreat( )方法中创建了一个Int-enFilter的实例，并且给它添加了一个值为android.net.conn.CONNECTIVITY_CHANGE的action，这是因为当系统的的网络状况发生改变时，发出的就是一条值为android.net.conn.CONNECTIVITY -CHANGE的广播，想接收什么样的广播，就在这里加入相应的action。接着用registerReceiver方法进行注册。注意，动态注册的广播接收器一定都要取消注册才行。</p><p>（注意：如果程序需要进行一些对用户来说比较敏感的操作，就必须在配置文件中声明权限才可以，否则程序会崩溃）</p><p><strong>静态注册</strong></p><p>首先需要创建一个新的类，作为广播接收器，同样可以在onReceive方法中写入自己的逻辑，在创建时记得勾选Exported属性和Enabled属性，然后在AndroidManifest.xml文件中加入需要用到的权限和action。</p><h2 id="发送自定义广播"><a href="#发送自定义广播" class="headerlink" title="发送自定义广播"></a>发送自定义广播</h2><p><strong>发送标准广播</strong></p><p>同样，首先要定义一个广播接收器来接收广播，然后进行注册，接着在活动中加入以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(想要使用的action);</span><br><span class="line">sendBroadcast(intent);</span><br></pre></td></tr></table></figure><p>以上代码的作用是：首先构建出一个Intent对象，并把要发送的广播值传入，然后调用Context的s-endBroadcast( )方法将广播发送出去，这样发送出去的是一条标准广播。</p><p><strong>发送有序广播</strong></p><p>在上述代码基础上将<code>sendBroadcast(intent)</code>换为<code>sendOrderedBroadcast(intent,与权限相关的字符串)</code>，然后在AndroidManifest.xml中加入如下代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;intent-filter android:priority=<span class="string">&quot;100&quot;</span>&gt;         <span class="comment">//priority用于设置广播接收器的优先性</span></span><br></pre></td></tr></table></figure><p>这样，就成功发送并接收了一个有序广播，如果想在中途将广播截断，就在想截断的接收器的onReceive方法中加入代码<code>abortBroadcast</code>。</p><h2 id="使用本地广播"><a href="#使用本地广播" class="headerlink" title="使用本地广播"></a>使用本地广播</h2><p>本地广播确保广播只会在应用程序内部传递，并且广播接收器只会接收来自本应用程序发出的广播。下面是使用本地广播的一个实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> IntentFilter intentFilter;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> LocalReceiver localReceiver;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> LocalBroadcastManager localBroadcastManager;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">      setContentView(R.layout.activity_main);</span><br><span class="line">      localBroadcastManager = LocalBroadcastManager.getInstance(<span class="keyword">this</span>); <span class="comment">// 获取实例</span></span><br><span class="line">      Button button = (Button) findViewById(R.id.button);</span><br><span class="line">      button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">              Intent intent = <span class="keyword">new</span> </span><br><span class="line">              Intent(<span class="string">&quot;com.example.broadcasttest.LOCAL_BROADCAST&quot;</span>); </span><br><span class="line">              localBroadcastManager.sendBroadcast(intent); <span class="comment">// 发送本地广播</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">      intentFilter.addAction(<span class="string">&quot;com.example.broadcasttest.LOCAL_BROADCAST&quot;</span>);</span><br><span class="line">      localReceiver = <span class="keyword">new</span> LocalReceiver();</span><br><span class="line">      localBroadcastManager.registerReceiver(localReceiver, intentFilter); <span class="comment">// 注册本地广播监听器</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.onDestroy();</span><br><span class="line">      localBroadcastManager.unregisterReceiver(localReceiver);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">LocalReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">          <span class="comment">//加入逻辑</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>首先通过LocalBroadcastManager的getinstance( )方法得到它的一个实例，然后在注册广播接收器的时候调用的是LocalBroad-castManager的registerReceiver( )方法，在发送广播时调用的是Local-BroadcasrManager的sendbroadcast( )方法。另外，本地广播无法通过静态注册的方式来接收。</p><p>本地广播的优点：</p><ul><li>广播不会离开我们的程序，不用担心数据泄露。</li><li>其他程序的广播不会发生送到我们的程序中。</li><li>发送本地广播比发送系统全局广播更加高效。</li></ul><h2 id="实现强制下线功能"><a href="#实现强制下线功能" class="headerlink" title="实现强制下线功能"></a>实现强制下线功能</h2><p>首先新建一个ActivityCollector类用于管理所有的活动，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityCollector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Activity&gt; activities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addActivity</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        activities.add(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeActivity</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        activities.remove(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">finishAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Activity activity : activities) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!activity.isFinishing()) &#123;</span><br><span class="line">                activity.finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建Baseactivity类作为所有活动的父类，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ForceOfflineReceiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ActivityCollector.addActivity(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">        intentFilter.addAction(<span class="string">&quot;com.example.broadcastbestpractice.FORCE_OFFLINE&quot;</span>);</span><br><span class="line">        receiver = <span class="keyword">new</span> ForceOfflineReceiver();</span><br><span class="line">        registerReceiver(receiver, intentFilter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPause();</span><br><span class="line">        <span class="keyword">if</span> (receiver!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            unregisterReceiver(receiver);</span><br><span class="line">            receiver = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        ActivityCollector.removeActivity(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ForceOfflineReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Intent intent)</span> </span>&#123;</span><br><span class="line">            AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(context);</span><br><span class="line">            builder.setTitle(<span class="string">&quot;Warning&quot;</span>);</span><br><span class="line">            builder.setMessage(<span class="string">&quot;You are forced to be offline. Please try to login again.&quot;</span>);</span><br><span class="line">            builder.setCancelable(<span class="keyword">false</span>);</span><br><span class="line">            builder.setPositiveButton(<span class="string">&quot;OK&quot;</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                    ActivityCollector.finishAll();</span><br><span class="line">                    Intent intent = <span class="keyword">new</span> Intent(context,LoginActivity.class);</span><br><span class="line">                    context.startActivity(intent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            builder.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在BaseActivity中我们定义了一个内部类ForceOfflineReceive作为广播的接收器。在接收器中，首先使用AlertDialog.Builder来构建一个对话框，注意这里一定要调用setCancelable()方法将对话框设为不可取消，否则用户按一下Back键就可以关闭对话框继续使用程序了。然后使用setPositiveButton()方法来给对话框注册确定按钮，当用户按下确定按钮后，就调用ActivityCollect-or的finishAll()方法来销毁掉所有的活动，并重新启动LoginActivity这个活动。</p><p>然后新建一个新的活动LoginActivity，分别在LoginActivity和activity_login.xml中写入如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EditText accountEdit;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EditText passwordEdit;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button login;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button guangbo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_login);</span><br><span class="line">        accountEdit = (EditText) findViewById(R.id.account);</span><br><span class="line">        passwordEdit = (EditText) findViewById(R.id.password);</span><br><span class="line">        login = (Button) findViewById(R.id.login);</span><br><span class="line">        login.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                String account = accountEdit.getText().toString();</span><br><span class="line">                String password = passwordEdit.getText().toString();</span><br><span class="line">                <span class="keyword">if</span> (account.equals(<span class="string">&quot;admin&quot;</span>)&amp;&amp;password.equals(<span class="string">&quot;123456&quot;</span>)) &#123;</span><br><span class="line">                    Intent intent = <span class="keyword">new</span> Intent(LoginActivity.<span class="keyword">this</span>,MainActivity.class);</span><br><span class="line">                    startActivity(intent);</span><br><span class="line">                    finish();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(LoginActivity.<span class="keyword">this</span>, <span class="string">&quot;account or password                                                            is&quot;</span> + <span class="string">&quot;invalid&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        guangbo = (Button) findViewById(R.id.guangbo);</span><br><span class="line">        guangbo.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(<span class="string">&quot;com.example.broadcastbestpractice.FORCE_OFFLINE&quot;</span>);</span><br><span class="line">                sendBroadcast(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在LoginActivity中，我们首先获取到账号输入框、密码输入框以及登录按钮的实例，然后对输入的账号密码进行判断，登录成功后跳转到MainActivity，否则就提示用户账号或密码错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;vertical&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:orientation=<span class="string">&quot;horizontal&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;60dp&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width=<span class="string">&quot;90dp&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">            android:layout_gravity=<span class="string">&quot;center_vertical&quot;</span></span><br><span class="line">            android:textSize=<span class="string">&quot;18sp&quot;</span></span><br><span class="line">            android:text=<span class="string">&quot;Account:&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;EditText</span><br><span class="line">            android:id=<span class="string">&quot;@+id/account&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">            android:layout_weight=<span class="string">&quot;1&quot;</span></span><br><span class="line">            android:layout_gravity=<span class="string">&quot;center_vertical&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:orientation=<span class="string">&quot;horizontal&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;60dp&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width=<span class="string">&quot;90dp&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">            android:layout_gravity=<span class="string">&quot;center_vertical&quot;</span></span><br><span class="line">            android:textSize=<span class="string">&quot;18sp&quot;</span></span><br><span class="line">            android:text=<span class="string">&quot;Password:&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;EditText</span><br><span class="line">            android:id=<span class="string">&quot;@+id/password&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">            android:layout_weight=<span class="string">&quot;1&quot;</span></span><br><span class="line">            android:layout_gravity=<span class="string">&quot;center_vertical&quot;</span></span><br><span class="line">            android:inputType=<span class="string">&quot;textPassword&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=<span class="string">&quot;@+id/login&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;60dp&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;Login&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=<span class="string">&quot;@+id/guangbo&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;发送广播&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>另外，还要在AndroidManifest.xml中Login设为主活动，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    <span class="keyword">package</span>=<span class="string">&quot;com.example.broadcastbestpractice&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;application</span><br><span class="line">        android:allowBackup=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:icon=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span><br><span class="line">        android:label=<span class="string">&quot;@string/app_name&quot;</span></span><br><span class="line">        android:supportsRtl=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:theme=<span class="string">&quot;@style/AppTheme&quot;</span>&gt;</span><br><span class="line">        &lt;activity android:name=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span><br><span class="line">        &lt;/activity&gt;</span><br><span class="line">        &lt;activity android:name=<span class="string">&quot;.LoginActivity&quot;</span>&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;action android:name=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br><span class="line">                &lt;category android:name=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span><br><span class="line">            &lt;/intent-filter&gt;</span><br><span class="line">        &lt;/activity&gt;</span><br><span class="line">    &lt;/application&gt;</span><br><span class="line"></span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇博客讲一讲Android Studio中广播的使用。&lt;/p&gt;
&lt;p&gt;什么是广播呢？我们上高中时，每个教室里都会装有一个喇叭，这些喇叭都是接入到学校的广播室的，一旦有什么重要的通知，就会播放一条广播来告知全校的师生。类似的工作机制其实在计算机领域也有很广泛的应用，在一个I</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>UseTypora</title>
    <link href="https://creater66.github.io/2021/08/19/UseTypora/"/>
    <id>https://creater66.github.io/2021/08/19/UseTypora/</id>
    <published>2021-08-19T14:05:42.000Z</published>
    <updated>2021-08-19T14:58:29.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>标题的使用方法很简单，使用格式如下：</p><p><strong>#+空格+标题内容</strong>             表示一号标题</p><p><strong>##+空格+标题内容</strong>           表示二号标题</p><p><strong>##+空格+标题内容</strong>           表示三号标题</p><p>……以次类推，不过注意，最多只有六级标题.</p><hr><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>字体的使用方式也比较简单，主要有以下几种方式：</p><p>** <strong>+内容+</strong> **                     表示对字体进行加粗</p><p>*** +内容+** *                          表示对字体进行倾斜处理</p><p><em><strong><strong><strong>+<strong>内容</strong>+</strong></strong></strong></em>                    表示对字体进行加粗和倾斜处理</p><p><strong>~~ +内容+ ~~</strong>                      表示在文字上方加上一条横线，效果如：<del>内容</del></p><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>我们在写博客时常常会引用别人文章的一些内容，这时就要用到引用，引用的基本用法如下：</p><p><strong>&gt;+空格</strong>                             </p><p><strong>|+空格</strong></p><p>引用的效果为：</p><blockquote><p>这是引用的效果</p></blockquote><hr><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>分割线常常用于对我们所写的内容进行分割，这样我们的文章看起来会更加有层次，分割线的使用方法如下：</p><p><strong>- + - + -</strong></p><p>分割线的效果如下：</p><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>我们在写博客时常常需要加入图片，这样我们的博客看起来才会更加生动，加入图片的方法如下：</p><p><strong>!+[图片名称]+(图片路径)</strong></p><p>加入的图片可以是本地图片，也可以是网上的图片，只要分别在()中写入正确的图片路径就可以了。本地图片<br>路径想必你也比较熟悉，我就不加赘述，主要讲一讲如何查找网上图片的路径，具体操作如下图所示：</p><img src="C:\Users\HUAWEI\myblog\public\images\linkteach.png" alt="加入图片链接" style="zoom:50%;" /><p>然后把复制下来的链接粘贴到指定位置即可。</p><hr><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>对于超链接你应该不陌生吧？如果不了解也没关系，超链接就是一个可以点击并跳转到相应页面的链接，例如：<br><a href="https://www.baidu.com/">百度</a>,点击一下这两个字就会跳转到百度的页面。了解了什么是超链接，那么如何在自己的博客中加入一个超链<br>接呢？具体方法如下：</p><p><strong>[名称]+(链接)</strong></p><hr><p>这里的名称你可以按照网站的名称来定，当然也可以自定义，链接就加入你想跳转到的目标网站。</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>说到列表，你会不会以为是表格？然而不是的。那么如何使用列表呢？具体方法如下：</p><p><strong>1+.+空格</strong></p><p>当你按下回车换行时，下一行会自动帮你生成”2. “。</p><p>还有一种列表是这样的：</p><p>这种列表的使用方法是：</p><p><strong>-+空格</strong></p><p>同样，当你按下回车换行后，下一行也会自动生成一个“<strong>·</strong>”。</p><hr><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>插入表格有两种方法，如下：</p><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>在Typora中右击鼠标，然后点击插入，再点击表格，然后选择大小、规格即可，这种方法比较简单。</p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>如输入：</p><p>名字|性别|生日</p><p>–|–|–|</p><p>张三|男|1997.1.1，</p><p>在Typora中要点击左下角显示源代码，然后把行与行之间的空行删除，具体操作如下图所示：</p><p><img src="C:\Users\HUAWEI\myblog\public\images\Excleteach.png" alt="表格"></p><p>点击这个图标即可显示源代码，再把相应部分的空行删除即可。</p><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>当我们需要在博客中写入代码时该如何操作呢？具体方法如下：</p><h3 id="方法一：-1"><a href="#方法一：-1" class="headerlink" title="方法一："></a>方法一：</h3><p>两个“ ` ”键，然后再中间写入代码即可。效果如下：</p><p><code>Hello World</code></p><h3 id="方法二：-1"><a href="#方法二：-1" class="headerlink" title="方法二："></a>方法二：</h3><p>三个” ` “键+语言名称，随后会出现一个方框，再方框中写入代码即可。效果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br></pre></td></tr></table></figure><p>对于这两种方法，我更推荐使用第二种，因为第二种更加美观，而且更见显眼，也方便读者知道是什么语言。</p><hr><p>以上就是写一篇文章可能会用到的一些属性的基本语法，相信看到这里，你应该已经迫不及待地想动手开始写<br>自己的博客了吧？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h2&gt;&lt;p&gt;标题的使用方法很简单，使用格式如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;#+空格+标题内容&lt;/strong&gt;             表示一号标</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://creater66.github.io/2021/08/12/FirstPost/"/>
    <id>https://creater66.github.io/2021/08/12/FirstPost/</id>
    <published>2021-08-12T15:47:11.882Z</published>
    <updated>2021-08-12T15:47:43.793Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://creater66.github.io/2021/08/12/My-New-Post/"/>
    <id>https://creater66.github.io/2021/08/12/My-New-Post/</id>
    <published>2021-08-12T15:38:50.998Z</published>
    <updated>2021-08-12T15:39:58.944Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://creater66.github.io/2021/07/29/hello-world/"/>
    <id>https://creater66.github.io/2021/07/29/hello-world/</id>
    <published>2021-07-29T07:40:27.745Z</published>
    <updated>2021-07-29T07:40:27.745Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
