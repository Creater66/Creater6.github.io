<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YX.的博客</title>
  
  <subtitle>记录敲代码之旅</subtitle>
  <link href="https://creater66.github.io/atom.xml" rel="self"/>
  
  <link href="https://creater66.github.io/"/>
  <updated>2021-08-21T09:18:39.606Z</updated>
  <id>https://creater66.github.io/</id>
  
  <author>
    <name>YX.</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Use Broadcast</title>
    <link href="https://creater66.github.io/2021/08/20/UseBroadcast/"/>
    <id>https://creater66.github.io/2021/08/20/UseBroadcast/</id>
    <published>2021-08-20T10:17:42.000Z</published>
    <updated>2021-08-21T09:18:39.606Z</updated>
    
    <content type="html"><![CDATA[<p>​               本篇博客讲一讲Android Studio中广播的使用。</p><p>​               什么是广播呢？我们上高中时，每个教室里都会装有一个喇叭，这些喇叭都是接入到学校的广播室的，一旦有什么重要的通知，就会播放一条广播来告知全校的师生。类似的工作机制其实在计算机领域也有很广泛的应用，在一个IP网络范围中，最大的IP地址是被保留作为广播来使用的。比如某个网络的IP范围是192.168.0.255。广播数据包会被发送到同一网络上的所有端口，这样在该网络中的每台主机都将会收到这条广播。为了便于进行系统级别的消息通知，Android也引入了一套类似的广播消息机制。</p><h2 id="广播的类型："><a href="#广播的类型：" class="headerlink" title="广播的类型："></a>广播的类型：</h2><p>广播主要可以分为两种类型：标准广播和有序广播。</p><p><strong>标准广播</strong>（Normal broadcasts）：广播发出后，所有的接收器同时接收到这条广播消息。优点在于这类广播效率高，缺点是无法被截断。</p><p><strong>有序广播</strong>（Ordered broadcasts）：广播发出后，同一时刻只有一个广播接收器能够收到这条广播消息，当这个广播接收器中的逻辑执行完毕后，广播才会继续传递。也就是说，这类广播的广播接收器是有先后顺序的，优先级高的广播接收器就优先收到这条广播消息，并且前面的广播接收器可以截断正在传递的广播，这样后面的广播接收器就无法收到广播消息了。</p><h2 id="接收系统广播"><a href="#接收系统广播" class="headerlink" title="接收系统广播"></a>接收系统广播</h2><p>​               广播接收器需要对自己感兴趣的广播进行注册，这样当广播发出后，这个接收器就可以接收到相应的广播。注册广播的方式有两种，<strong>动态注册和静态注册</strong>，前者是在代码中注册，后者是在AndroidManifest.xml中注册。</p><p><strong>创建一个广播接收器：</strong></p><p>​               新建一个类，让它继承自BroadcastReceive，然后重写onReceive方法。创建广播接收器是需要用到以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> IntentFilter intentFilter;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> NetworkChangeReceiver networkChangeReceiver;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">       setContentView(R.layout.activity_main);</span><br><span class="line">       intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">       intentFilter.addAction(<span class="string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span>);</span><br><span class="line">       networkChangeReceiver = <span class="keyword">new</span> NetworkChangeReceiver();</span><br><span class="line">       registerReceiver(networkChangeReceiver, intentFilter);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onDestroy();</span><br><span class="line">       unregisterReceiver(networkChangeReceiver);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">NetworkChangeReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">           <span class="comment">//加入逻辑</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>​               NetworkChangeReceive是一个内部类，用来作为广播接收器，在onCreat( )方法中创建了一个Int-enFilter的实例，并且给它添加了一个值为android.net.conn.CONNECTIVITY_CHANGE的action，这是因为当系统的的网络状况发生改变时，发出的就是一条值为android.net.conn.CONNECTIVITY -CHANGE的广播，想接收什么样的广播，就在这里加入相应的action。接着用registerReceiver方法进行注册。注意，动态注册的广播接收器一定都要取消注册才行。</p><p>（注意：如果程序需要进行一些对用户来说比较敏感的操作，就必须在配置文件中声明权限才可         以，否则程序会崩溃）</p><p><strong>静态注册：</strong></p><p>​               首先需要创建一个新的类，作为广播接收器，同样可以在onReceive方法中写入自己的逻辑，在创建时记得勾选Exported属性和Enabled属性，然后在AndroidManifest.xml文件中加入需要用到的权限和action。</p><h2 id="发送自定义广播"><a href="#发送自定义广播" class="headerlink" title="发送自定义广播"></a>发送自定义广播</h2><p><strong>发送标准广播</strong></p><p>同样，首先要定义一个广播接收器来接收广播，然后进行注册，接着在活动中加入以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(想要使用的action);</span><br><span class="line">sendBroadcast(intent);</span><br></pre></td></tr></table></figure><p>​               以上代码的作用是：首先构建出一个Intent对象，并把要发送的广播值传入，然后调用Context的s-endBroadcast( )方法将广播发送出去，这样发送出去的是一条标准广播。</p><p><strong>发送有序广播</strong></p><p>​               在上述代码基础上将<code>sendBroadcast(intent)</code>换为<code>sendOrderedBroadcast(intent,与权限相关的字符串)</code>，然后在AndroidManifest.xml中加入如下代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;intent-filter android:priority=<span class="string">&quot;100&quot;</span>&gt;         <span class="comment">//priority用于设置广播接收器的优先性</span></span><br></pre></td></tr></table></figure><p>​               这样，就成功发送并接收了一个有序广播，如果想在中途将广播截断，就在想截断的接收器的onReceive方法中加入代码<code>abortBroadcast</code>。</p><h2 id="使用本地广播"><a href="#使用本地广播" class="headerlink" title="使用本地广播"></a>使用本地广播</h2><p>​               本地广播确保广播只会在应用程序内部传递，并且广播接收器只会接收来自本应用程序发出的广播。</p><p>下面是使用本地广播的一个实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> IntentFilter intentFilter;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> LocalReceiver localReceiver;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> LocalBroadcastManager localBroadcastManager;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">      setContentView(R.layout.activity_main);</span><br><span class="line">      localBroadcastManager = LocalBroadcastManager.getInstance(<span class="keyword">this</span>); <span class="comment">// 获取实例</span></span><br><span class="line">      Button button = (Button) findViewById(R.id.button);</span><br><span class="line">      button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">              Intent intent = <span class="keyword">new</span> </span><br><span class="line">              Intent(<span class="string">&quot;com.example.broadcasttest.LOCAL_BROADCAST&quot;</span>); </span><br><span class="line">              localBroadcastManager.sendBroadcast(intent); <span class="comment">// 发送本地广播</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">      intentFilter.addAction(<span class="string">&quot;com.example.broadcasttest.LOCAL_BROADCAST&quot;</span>);</span><br><span class="line">      localReceiver = <span class="keyword">new</span> LocalReceiver();</span><br><span class="line">      localBroadcastManager.registerReceiver(localReceiver, intentFilter); <span class="comment">// 注册本地广播监听器</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.onDestroy();</span><br><span class="line">      localBroadcastManager.unregisterReceiver(localReceiver);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">LocalReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">          <span class="comment">//加入逻辑</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>​               首先通过LocalBroadcastManager的getinstance( )方法得到它的一个实例，然后在注册广播接收器的时候调用的是LocalBroad-castManager的registerReceiver( )方法，在发送广播时调用的是Local-BroadcasrManager的sendbroadcast( )方法。另外，本地广播无法通过静态注册的方式来接收。</p><p>本地广播的优点：</p><ul><li>广播不会离开我们的程序，不用担心数据泄露。</li><li>其他程序的广播不会发生送到我们的程序中。</li><li>发送本地广播比发送系统全局广播更加高效。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​               本篇博客讲一讲Android Studio中广播的使用。&lt;/p&gt;
&lt;p&gt;​               什么是广播呢？我们上高中时，每个教室里都会装有一个喇叭，这些喇叭都是接入到学校的广播室的，一旦有什么重要的通知，就会播放一条广播来告知全校</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>UseTypora</title>
    <link href="https://creater66.github.io/2021/08/19/UseTypora/"/>
    <id>https://creater66.github.io/2021/08/19/UseTypora/</id>
    <published>2021-08-19T14:05:42.000Z</published>
    <updated>2021-08-19T14:58:29.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>标题的使用方法很简单，使用格式如下：</p><p><strong>#+空格+标题内容</strong>             表示一号标题</p><p><strong>##+空格+标题内容</strong>           表示二号标题</p><p><strong>##+空格+标题内容</strong>           表示三号标题</p><p>……以次类推，不过注意，最多只有六级标题.</p><hr><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>字体的使用方式也比较简单，主要有以下几种方式：</p><p>** <strong>+内容+</strong> **                     表示对字体进行加粗</p><p>*** +内容+** *                          表示对字体进行倾斜处理</p><p><em><strong><strong><strong>+<strong>内容</strong>+</strong></strong></strong></em>                    表示对字体进行加粗和倾斜处理</p><p><strong>~~ +内容+ ~~</strong>                      表示在文字上方加上一条横线，效果如：<del>内容</del></p><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>我们在写博客时常常会引用别人文章的一些内容，这时就要用到引用，引用的基本用法如下：</p><p><strong>&gt;+空格</strong>                             </p><p><strong>|+空格</strong></p><p>引用的效果为：</p><blockquote><p>这是引用的效果</p></blockquote><hr><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>分割线常常用于对我们所写的内容进行分割，这样我们的文章看起来会更加有层次，分割线的使用方法如下：</p><p><strong>- + - + -</strong></p><p>分割线的效果如下：</p><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>我们在写博客时常常需要加入图片，这样我们的博客看起来才会更加生动，加入图片的方法如下：</p><p><strong>!+[图片名称]+(图片路径)</strong></p><p>加入的图片可以是本地图片，也可以是网上的图片，只要分别在()中写入正确的图片路径就可以了。本地图片<br>路径想必你也比较熟悉，我就不加赘述，主要讲一讲如何查找网上图片的路径，具体操作如下图所示：</p><img src="C:\Users\HUAWEI\myblog\public\images\linkteach.png" alt="加入图片链接" style="zoom:50%;" /><p>然后把复制下来的链接粘贴到指定位置即可。</p><hr><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>对于超链接你应该不陌生吧？如果不了解也没关系，超链接就是一个可以点击并跳转到相应页面的链接，例如：<br><a href="https://www.baidu.com/">百度</a>,点击一下这两个字就会跳转到百度的页面。了解了什么是超链接，那么如何在自己的博客中加入一个超链<br>接呢？具体方法如下：</p><p><strong>[名称]+(链接)</strong></p><hr><p>这里的名称你可以按照网站的名称来定，当然也可以自定义，链接就加入你想跳转到的目标网站。</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>说到列表，你会不会以为是表格？然而不是的。那么如何使用列表呢？具体方法如下：</p><p><strong>1+.+空格</strong></p><p>当你按下回车换行时，下一行会自动帮你生成”2. “。</p><p>还有一种列表是这样的：</p><p>这种列表的使用方法是：</p><p><strong>-+空格</strong></p><p>同样，当你按下回车换行后，下一行也会自动生成一个“<strong>·</strong>”。</p><hr><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>插入表格有两种方法，如下：</p><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>在Typora中右击鼠标，然后点击插入，再点击表格，然后选择大小、规格即可，这种方法比较简单。</p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>如输入：</p><p>名字|性别|生日</p><p>–|–|–|</p><p>张三|男|1997.1.1，</p><p>在Typora中要点击左下角显示源代码，然后把行与行之间的空行删除，具体操作如下图所示：</p><p><img src="C:\Users\HUAWEI\myblog\public\images\Excleteach.png" alt="表格"></p><p>点击这个图标即可显示源代码，再把相应部分的空行删除即可。</p><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>当我们需要在博客中写入代码时该如何操作呢？具体方法如下：</p><h3 id="方法一：-1"><a href="#方法一：-1" class="headerlink" title="方法一："></a>方法一：</h3><p>两个“ ` ”键，然后再中间写入代码即可。效果如下：</p><p><code>Hello World</code></p><h3 id="方法二：-1"><a href="#方法二：-1" class="headerlink" title="方法二："></a>方法二：</h3><p>三个” ` “键+语言名称，随后会出现一个方框，再方框中写入代码即可。效果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br></pre></td></tr></table></figure><p>对于这两种方法，我更推荐使用第二种，因为第二种更加美观，而且更见显眼，也方便读者知道是什么语言。</p><hr><p>以上就是写一篇文章可能会用到的一些属性的基本语法，相信看到这里，你应该已经迫不及待地想动手开始写<br>自己的博客了吧？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h2&gt;&lt;p&gt;标题的使用方法很简单，使用格式如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;#+空格+标题内容&lt;/strong&gt;             表示一号标</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://creater66.github.io/2021/08/12/FirstPost/"/>
    <id>https://creater66.github.io/2021/08/12/FirstPost/</id>
    <published>2021-08-12T15:47:11.882Z</published>
    <updated>2021-08-12T15:47:43.793Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://creater66.github.io/2021/08/12/My-New-Post/"/>
    <id>https://creater66.github.io/2021/08/12/My-New-Post/</id>
    <published>2021-08-12T15:38:50.998Z</published>
    <updated>2021-08-12T15:39:58.944Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://creater66.github.io/2021/07/29/hello-world/"/>
    <id>https://creater66.github.io/2021/07/29/hello-world/</id>
    <published>2021-07-29T07:40:27.745Z</published>
    <updated>2021-07-29T07:40:27.745Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
